package com.example.hospitalapp;

import java.io.File;
import java.io.Serializable;
import java.lang.reflect.Type;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import okhttp3.Call;

import com.example.hospitalapp.adapter.RecordAllAdapter;
import com.example.hospitalapp.entity.PersonContent;
import com.example.hospitalapp.entity.RecordAllContent;
import com.example.hospitalapp.nonetwork.adapter.QuestionNonetWorkAdapter;
import com.example.hospitalapp.nonetwork.adapter.RecordNonetWorkAdapter;
import com.example.hospitalapp.nonetwork.adapter.QuestionNonetWorkAdapter.OnNotifyDataListener;
import com.example.hospitalapp.nonetwork.entity.AnswerNonetWorkContent;
import com.example.hospitalapp.nonetwork.entity.FormatDetailedQuestionModel;
import com.example.hospitalapp.nonetwork.entity.YGNonetWorkContent;
import com.example.hospitalapp.nonetwork.entity.FormatDetailedQuestionModel.ParentModel;
import com.example.hospitalapp.sqlite.PersonDao;
import com.example.hospitalapp.sqlite.RecordNonetWorkContent;
import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import com.zhy.http.okhttp.OkHttpUtils;
import com.zhy.http.okhttp.callback.Callback;
import com.zhy.http.okhttp.callback.StringCallback;
import android.app.Activity;
import android.app.AlertDialog;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.pm.ActivityInfo;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.net.wifi.WifiInfo;
import android.net.wifi.WifiManager;
import android.os.Bundle;
import android.text.Html;
import android.text.Layout;
import android.text.TextUtils;
import android.util.Log;
import android.view.Gravity;
import android.view.KeyEvent;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.inputmethod.InputMethodManager;
import android.view.Window;
import android.view.WindowManager;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ExpandableListView;
import android.widget.ExpandableListView.OnGroupClickListener;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.LinearLayout.LayoutParams;
import android.widget.ListView;
import android.widget.RelativeLayout;
import android.widget.TextView;
import android.widget.Toast;

public class DetailedQuestionNonetWork extends Activity implements
		OnClickListener, OnItemClickListener {

	private String createPersoninfoUrl =MainActivity.httpStr+ MainActivity.url+ "/Json/Set_Investigator.aspx";
	//public static int myId;
	private String submitUrl = MainActivity.httpStr+MainActivity.url
			+ "/Json/Set_User_AnswerInfo.aspx";
	private String recordUrl = MainActivity.httpStr+MainActivity.url+ "/json/Get_Investigators_Info.aspx";
	private LinearLayout ll_record, ll_record_bg,ll_recordAll_bg,ll_conn_bg;
	private RelativeLayout rl_submit, rl_caidan, rl_header;
	private ListView lv_record,lv_recordAll;
	private RecordAllAdapter recordAllAdapter;
	private List<RecordAllContent> recordAllData=new ArrayList<RecordAllContent>();
	private RecordNonetWorkAdapter recordAdapter;
	private List<RecordNonetWorkContent> recordData = new ArrayList<RecordNonetWorkContent>();
	private List<RecordNonetWorkContent> list = new ArrayList<RecordNonetWorkContent>();
	private Button btn_submit;
	private EditText et_name, et_phone;
	private String nameStr, phoneStr;
	private PersonDao pDao;
	private int YHID;
	private String YGXM;
	private String YGID;
	private String result;
	private String submitResult;
	private String networksubmitResult;
	public static int mId;
	private List<AnswerNonetWorkContent> answerlist = new ArrayList<AnswerNonetWorkContent>();
	private List<RecordNonetWorkContent> recordlist = new ArrayList<RecordNonetWorkContent>();
	private String myJson;
	public int personID;
	// ============================
	public static final String LIST = "list";
	public static final String DATA_LIST = "dataList";
	private ExpandableListView mExpandableListView;
	private List<FormatDetailedQuestionModel.ParentModel> mList = new ArrayList<FormatDetailedQuestionModel.ParentModel>();
	private QuestionNonetWorkAdapter adapter;
	private TextView tv_header, tv_header_title, tv_record_bg,tv_recordAll_bg,tv_conn_bg;
	private Bundle bundle;

	HashMap<Integer, Boolean> hashMap = new HashMap<>();

	private int requestCode;

	@Override
	protected void onCreate(Bundle savedInstanceState) {

		super.onCreate(savedInstanceState);
		requestWindowFeature(Window.FEATURE_NO_TITLE);
		setContentView(R.layout.activity_detailedquestion_nonetwork);

		Intent intent = getIntent();
		bundle = intent.getBundleExtra(LIST);
		if (bundle != null) {
			mList.addAll((List<FormatDetailedQuestionModel.ParentModel>) bundle
					.getSerializable(DATA_LIST));
		}

		ll_record = (LinearLayout) findViewById(R.id.ll_record_nonetWork);
		ll_record.setVisibility(View.GONE);
		
		ll_record_bg = (LinearLayout) findViewById(R.id.ll_record_bg);
		ll_record_bg.setVisibility(View.GONE);
		tv_record_bg = (TextView) findViewById(R.id.tv_record_bg);
		tv_record_bg.setText("");
		tv_record_bg.setVisibility(View.GONE);
		ll_recordAll_bg=(LinearLayout) findViewById(R.id.ll_recordAll_bg);
		ll_recordAll_bg.setVisibility(View.GONE);
		tv_recordAll_bg=(TextView) findViewById(R.id.tv_recordAll_bg);
		tv_recordAll_bg.setText("");
		tv_recordAll_bg.setVisibility(View.GONE);
		ll_conn_bg=(LinearLayout) findViewById(R.id.ll_conn_bg);
		ll_conn_bg.setOnClickListener(this);
		ll_conn_bg.setVisibility(View.GONE);
		tv_conn_bg=(TextView) findViewById(R.id.tv_conn_bg);
		tv_conn_bg.setText("");
		tv_conn_bg.setVisibility(View.GONE);
		
		rl_caidan = (RelativeLayout) findViewById(R.id.caidan_nonet_rl);
		rl_caidan.setOnClickListener(this);

		lv_record = (ListView) findViewById(R.id.lv_record_nonetWork);
		lv_record.setOnItemClickListener(this);
		recordAdapter = new RecordNonetWorkAdapter(recordData, this);
		lv_record.setAdapter(recordAdapter);

		lv_record.setVisibility(View.GONE);

		lv_recordAll=(ListView) findViewById(R.id.lv_allrecord_network);
		lv_recordAll.setOnItemClickListener(this);
		lv_recordAll.setVisibility(View.GONE);
		
		mExpandableListView = (ExpandableListView) findViewById(R.id.elv_answer_list);
		rl_submit = (RelativeLayout) LayoutInflater.from(this).inflate(
				R.layout.activity_personinfo_nonet, null);
		mExpandableListView.addFooterView(rl_submit);

		rl_header = (RelativeLayout) LayoutInflater.from(this).inflate(
				R.layout.header_detailedquestion_nonetwork, null);
		mExpandableListView.addHeaderView(rl_header);

		tv_header = (TextView) rl_header.findViewById(R.id.header_tv);
		tv_header_title = (TextView) rl_header
				.findViewById(R.id.header_title_tv);
		tv_header_title.setText(intent.getStringExtra("title_tv"));

		if (!TextUtils
				.isEmpty(Html.fromHtml(intent.getStringExtra("header_tv"))
						.toString().trim())) {
			rl_header.setVisibility(View.VISIBLE);
			tv_header.setVisibility(View.VISIBLE);
			tv_header.setText(Html.fromHtml(intent.getStringExtra("header_tv"))
					.toString().trim());
		} else {

			rl_header.setPadding(0, 0, 0, 0);
			// rl_header.setVisibility(View.GONE);
			tv_header.setVisibility(View.GONE);
		}

		mExpandableListView.setGroupIndicator(null);
		adapter = new QuestionNonetWorkAdapter(this, mList);
		mExpandableListView.setAdapter(adapter);

		mExpandableListView.setOnGroupClickListener(new OnGroupClickListener() {

			@Override
			public boolean onGroupClick(ExpandableListView parent, View v,
					int groupPosition, long id) {

				return true;
			}
		});
		adapter.setOnNotifyDataListener(new OnNotifyDataListener() {

			@Override
			public void notifyList() {
				expand();
			}
		});
		expand();
		btn_submit = (Button) rl_submit
				.findViewById(R.id.btn_submit_personinfo_nonet);
		btn_submit.setOnClickListener(this);

		et_name = (EditText) rl_submit
				.findViewById(R.id.et_name_personinfo_nonet);
		et_phone = (EditText) rl_submit
				.findViewById(R.id.et_phone_personinfo_nonet);

		pDao = new PersonDao(this);

		getAnInfo();

		//refreshView();
		// Log.i("2016/9/28","nonetworkJson=" + nonetworkJson);
		// 数据已经拿到了
	}

	private void getRecordAllData(){
		
		OkHttpUtils.post().url(recordUrl).addParams("MasterId",String.valueOf(FormList.mynoNetMasterId)).build().execute(new StringCallback() {
			
			@Override
			public void onResponse(final String str) {
				
				runOnUiThread(new  Runnable() {
					public void run() {
						
						Gson gson=new Gson();
						
						Type listType=new TypeToken<LinkedList<RecordAllContent>>(){}.getType();
						
						LinkedList<RecordAllContent> rc=gson.fromJson(str,listType);
						
						recordAllData.clear();
						recordAllAdapter=null;
						for(RecordAllContent rContent:rc){
							recordAllData.add(rContent);
						}
						
						recordAllAdapter=new RecordAllAdapter(recordAllData, DetailedQuestionNonetWork.this);
						lv_recordAll.setAdapter(recordAllAdapter);
						
						recordAllAdapter.notifyDataSetChanged();
						
						if (recordAllData.isEmpty()) {
							// Toast.makeText(DetailedQuestionNonetWork.this,"显示",0).show();
							ll_recordAll_bg.setVisibility(View.VISIBLE);
							tv_recordAll_bg.setVisibility(View.VISIBLE);
							tv_recordAll_bg.setText("没有查询记录");
							
						} else {
							// Toast.makeText(DetailedQuestionNonetWork.this,"隐藏",0).show();
							ll_recordAll_bg.setVisibility(View.GONE);
							tv_recordAll_bg.setVisibility(View.GONE);
							
						}
						
					}
				});
				
			}
			
			@Override
			public void onError(Call arg0, Exception arg1) {
				
			}
		});
		
	}
	
	@Override
	protected void onResume() {

		// 强制横屏
		if (getRequestedOrientation() != ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE) {
			setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);
		}

		super.onResume();

		// 无网版
		getYHID();
		// 有网版
		getYGXM();
		getYGID();
		
	}

	private void getYGXM() {

		SharedPreferences preferences = getSharedPreferences("YGXM",
				Context.MODE_PRIVATE);

		YGXM = preferences.getString("YGXM", null);

	}

	private void getYHID() {

		SharedPreferences preferences = getSharedPreferences("YG2",
				Context.MODE_PRIVATE);

		YHID = preferences.getInt("YHID", 0);

	};

	private void getYGID() {

		SharedPreferences preferences = getSharedPreferences("YG",
				Context.MODE_PRIVATE);

		YGID = preferences.getString("YGID", null);

	};

	@Override
	public void onClick(View v) {

		nameStr = et_name.getText().toString().trim();
		phoneStr = et_phone.getText().toString().trim();

		switch (v.getId()) {

		case R.id.caidan_nonet_rl:

			showDialog();

			break;

		case R.id.btn_submit_personinfo_nonet:

			doAnswer();

			break;
			
		case R.id.ll_conn_bg:
			
			if (!isNetworkAvailable(DetailedQuestionNonetWork.this)) {

				ll_conn_bg.setVisibility(View.VISIBLE);
				tv_conn_bg.setVisibility(View.VISIBLE);
				tv_conn_bg.setText("请连接网络，点击刷新");
				Toast.makeText(DetailedQuestionNonetWork.this, "请连接网络...",0).show();

			} else {
	
			lv_recordAll.setVisibility(View.VISIBLE);
			ll_conn_bg.setVisibility(View.GONE);
			tv_conn_bg.setVisibility(View.GONE);
			getRecordAllData();
			}
			
			break;
		default:
			break;
		}

	}

	// 答题
	private void doAnswer() {

		StringBuilder sb = new StringBuilder();
		for (int i = 0; i < mList.size(); i++) {
			List<FormatDetailedQuestionModel.AnswerModel> answers = mList
					.get(i).getAnswers();
			for (FormatDetailedQuestionModel.AnswerModel model : answers) {
				if (model.getChecked()) {
					sb.append(",");
					sb.append(model.getId() + ",");
					sb.append(TextUtils.isEmpty(model.getSuggestionText()) ? "|"
							: model.getSuggestionText() + "|");
					mList.get(i).setSelect(true);
				}
			}
			if (mList.get(i).isTitle()) {
				mList.get(i).setSelect(true);
			}
		}
		for (FormatDetailedQuestionModel.ParentModel model : mList) {
			if (!model.isSelect()) {
				hashMap.put(1, true);
				Toast.makeText(DetailedQuestionNonetWork.this,
						"题目未答完，只有所有题目答了才能提交成功", 0).show();
				return;
			} else {
				hashMap.put(1, false);
			}
		}
		if (hashMap.get(1)) {
			Toast.makeText(DetailedQuestionNonetWork.this,
					"题目未答完，只有所有题目答了才能提交成功", 0).show();
			hideKeyBoard();
		} else {

			result = sb.toString();
			result = result.substring(0, result.length() - 1);
			
			
			//Log.i("2016/11/21","===result==="+result);
			
		if(!isNetworkAvailable(DetailedQuestionNonetWork.this))	{
			//本地答题
			submitAnswer();
		}else if(isNetworkAvailable(DetailedQuestionNonetWork.this)){
			//网络答题
			createPersoninfo();
		}
		}
	}

	private void createPersoninfo(){
		String YGIDStr;
		
		if(Integer.valueOf(YGID)!=0){
			YGIDStr=YGID;
		}else {
			YGIDStr=String.valueOf(YHID);
		}
		
		OkHttpUtils.post().url(createPersoninfoUrl).addParams("YGID",YGIDStr)
		.addParams("Name",nameStr).addParams("Phone", phoneStr)
		.addParams("MasterId",String.valueOf(FormList.mynoNetMasterId))
		.build().execute(new StringCallback() {
			
			@Override
			public void onResponse(final String str) {
				
				runOnUiThread(new Runnable() {
					public void run() {
						
						Gson gson=new Gson();
						
						PersonContent pc=gson.fromJson(str,PersonContent.class);
						
						personID=pc.getID();
						
						networksubmitAnswer(personID);
					}
				});
				
			}
			
			@Override
			public void onError(Call arg0, Exception arg1) {
				Log.i("2016/9/8", "姓名电话提交失败" + arg0);
				
			}
		});
	}
	
	private void networksubmitAnswer(int personID){
		
		networksubmitResult= ("|" + result).replace("|,", "|" + personID + ",");
		networksubmitResult = networksubmitResult.substring(1, networksubmitResult.length());	
		
		Log.i("2016/11/22","=12321="+networksubmitResult);
		
		OkHttpUtils.post().url(submitUrl).addParams("User_Answer",networksubmitResult)
		.build().execute(new StringCallback() {
			
			@Override
			public void onResponse(String arg0) {
				Toast.makeText(DetailedQuestionNonetWork.this, "谢谢您，参与本次答题", 0)
				.show();
				hideKeyBoard();
				clearAnswer();
				
				Log.i("2016/11/22","=33333="+arg0);
			}
			
			@Override
			public void onError(Call arg0, Exception arg1) {
				
				Log.i("2016/8/26", "答案提交失败" + arg0);
				
				Toast.makeText(DetailedQuestionNonetWork.this, "提交失败" + arg0, 0)
				.show();
			}
		});
	}
	
	// 提交答案
	private void submitAnswer() {
		
		SimpleDateFormat df=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		
		RecordNonetWorkContent ct;

		if (YHID != 0) {

			

				ct = new RecordNonetWorkContent(0, YHID, nameStr, phoneStr,
						FormList.mynoNetMasterId, df.format(new Date()));
			
		} else {


				ct = new RecordNonetWorkContent(0, Integer.valueOf(YGID),
						nameStr, phoneStr, FormList.mynoNetMasterId,df.format(new Date()));
			

		}

		pDao.add(ct);

		int userId = pDao.findMaxId();

		// ===========================================================
		Log.i("2016/9/30", "submitResult之前=" + result);
		// 往answerInfo表中加数据

		// String z = "|Bayern Munich|";
		String z = "|";
		int cnt = 0;
		int offset = 0;
		while ((offset = result.indexOf(z, offset)) != -1) {
			offset = offset + z.length();
			cnt++;
		}
		String[] b = null;
		Log.i("2016/10/5", "cnt=" + cnt);
		for (int i = 0; i < cnt; i++) {

			// b = result.split("\\|" + "Bayern Munich" + "\\|");
			b = result.split("\\|");

		}

		// 往answerInfo表中加数据

		int tihao;

		String answerStr;

		for (String str : b) {

			tihao = Integer.valueOf(str.split(",")[1]);

			answerStr = str.substring(str.indexOf(",", 2)).substring(1);

			AnswerNonetWorkContent ac = new AnswerNonetWorkContent(userId,
					tihao, answerStr);

			pDao.addAll(ac);
		}

		// ==========================================================

		submitResult = ("|" + result).replace("|,", "|" + userId + ",");

		submitResult = submitResult.substring(1, submitResult.length());

		// Log.i("2016/9/30", "submitResult=" + submitResult);
		// Toast.makeText(this,"数据="+submitResult, 0).show();
		Toast.makeText(this, "提交成功", 0).show();
		hideKeyBoard();
		// 提交答案之后，之前的选项数据清空
		clearAnswer();
		// mExpandableListView.setVisibility(View.GONE);
		// lv_record.setVisibility(View.VISIBLE);
		// ll_record.setVisibility(View.VISIBLE);

		refreshView();
	}

	private void refreshView() {
		// 注意下面这句话
		// lv_record.requestLayout();

		recordAdapter.notifyDataSetChanged();

		recordData.clear();

		list = pDao.selectAllUsers();

		if (list.isEmpty()) {
			// Toast.makeText(DetailedQuestionNonetWork.this,"显示",0).show();
			ll_record_bg.setVisibility(View.VISIBLE);
			tv_record_bg.setVisibility(View.VISIBLE);
			tv_record_bg.setText("没有查询记录");
		} else {
			// Toast.makeText(DetailedQuestionNonetWork.this,"隐藏",0).show();
			ll_record_bg.setVisibility(View.GONE);
			tv_record_bg.setVisibility(View.GONE);
		}

		// 注意下面的这个循环，list和data必须是两个不同的集合，否则会出现ConcurrentModificationException异常
		for (Iterator iterator = list.iterator(); iterator.hasNext();) {

			final RecordNonetWorkContent c = (RecordNonetWorkContent) iterator
					.next();

			runOnUiThread(new Runnable() {

				@Override
				public void run() {

					Gson gson = new Gson();

					Type listType = new TypeToken<LinkedList<YGNonetWorkContent>>() {
					}.getType();

					LinkedList<YGNonetWorkContent> ygContent = gson.fromJson(
							myJson, listType);

					
					for (int i = 0; i < ygContent.size(); i++) {

						if (c.CREATE_USERID == ygContent.get(i).YHID) {

							c.YGXM = ygContent.get(i).YHXM;

						}
						
					}
					
				}
			});

			recordData.add(c);
		}

		// recordAdapter.notifyDataSetChanged();
	}

	// 显示对话框
	private void showDialog() {

		LinearLayout dialog_question, dialog_record, dialog_record_network;

		final AlertDialog dialog = new AlertDialog.Builder(
				DetailedQuestionNonetWork.this).create();

		View view = LayoutInflater.from(DetailedQuestionNonetWork.this)
				.inflate(R.layout.dialog_layout, null);

		dialog.setView(view);
		dialog.show();
		Window window = dialog.getWindow();
		WindowManager.LayoutParams lp = window.getAttributes();
		window.setGravity(Gravity.RIGHT | Gravity.TOP);
		lp.x = 30;
		lp.y = 70;
		window.setAttributes(lp);
		window.setContentView(R.layout.dialog_layout);

		dialog_question = (LinearLayout) window
				.findViewById(R.id.ll_new_nonetwork);
		dialog_question.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				mExpandableListView.setSelection(0);
				lv_record.setVisibility(View.GONE);
				mExpandableListView.setVisibility(View.VISIBLE);
				ll_record.setVisibility(View.GONE);
				ll_record_bg.setVisibility(View.GONE);
				lv_recordAll.setVisibility(View.GONE);
				ll_conn_bg.setVisibility(View.GONE);
				tv_conn_bg.setVisibility(View.GONE);
				ll_recordAll_bg.setVisibility(View.GONE);
				tv_recordAll_bg.setVisibility(View.GONE);
				dialog.dismiss();
			}
		});

		dialog_record = (LinearLayout) window
				.findViewById(R.id.ll_old_nonetwork);
		dialog_record.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				refreshView();
				lv_record.setSelection(0);
				ll_record.setVisibility(View.VISIBLE);
				lv_record.setVisibility(View.VISIBLE);
				mExpandableListView.setVisibility(View.GONE);
				lv_recordAll.setVisibility(View.GONE);
				ll_conn_bg.setVisibility(View.GONE);
				tv_conn_bg.setVisibility(View.GONE);
				ll_recordAll_bg.setVisibility(View.GONE);
				tv_recordAll_bg.setVisibility(View.GONE);
				if (list.isEmpty()) {
					ll_record_bg.setVisibility(View.VISIBLE);
					tv_record_bg.setVisibility(View.VISIBLE);
					tv_record_bg.setText("没有查询记录");
				} else {
					ll_record_bg.setVisibility(View.GONE);
					tv_record_bg.setVisibility(View.GONE);
				}

				dialog.dismiss();
			}
		});
		dialog_record_network = (LinearLayout) window
				.findViewById(R.id.ll_record_network);
		dialog_record_network.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				ll_record_bg.setVisibility(View.GONE);
				ll_record.setVisibility(View.VISIBLE);
				lv_record.setVisibility(View.GONE);
				mExpandableListView.setVisibility(View.GONE);
				if (!isNetworkAvailable(DetailedQuestionNonetWork.this)) {

					Toast.makeText(DetailedQuestionNonetWork.this, "请连接网络...",
							0).show();

					requestCode = 3333;

					Intent wifiSettingIntent = new Intent(
							"android.settings.WIFI_SETTINGS");

					startActivityForResult(wifiSettingIntent, requestCode);

				} else {

					ll_conn_bg.setVisibility(View.GONE);
					tv_conn_bg.setVisibility(View.GONE);
					lv_recordAll.setSelection(0);
					lv_recordAll.setVisibility(View.VISIBLE);
					getRecordAllData();
				}
				dialog.dismiss();
			}
		});
	}

	@Override
	public void onItemClick(AdapterView<?> parent, View view, int position,
			long id) {

		switch (parent.getId()) {
		case R.id.lv_record_nonetWork:
			//正序
//			mId = pDao.findMasterId((position + 1));
//			answerlist = pDao.findAnswer(position + 1);
//			recordlist = pDao.findPersonInfo(position + 1);
			
			//倒序
			mId = pDao.findMasterId(list.size()-position);
			answerlist = pDao.findAnswer(list.size()-position);
			recordlist = pDao.findPersonInfo(list.size()-position);
			
			
			
			Intent intent = new Intent(DetailedQuestionNonetWork.this,
					AnswerNonetWorkActivity.class);
			intent.putExtra("answerlist", (Serializable) answerlist);
			intent.putExtra("recordlist", (Serializable) recordlist);

			for (int i = 0; i < FormList.noNetData.size(); i++) {

				if (FormList.noNetData.get(i).ID == mId) {

					intent.putExtra("title_tv", FormList.noNetData.get(i).TITLE);
					intent.putExtra("header_tv", FormList.noNetData.get(i).NOTE);
				}

			}

			startActivity(intent);
			
			break;
			
		case R.id.lv_allrecord_network:
			
			mId = recordAllData.get(position).ID;
			Intent intent2 = new Intent(this, AnswerActivity.class);
			intent2.putExtra("name",recordAllData.get(position).NAME);
			intent2.putExtra("phone",recordAllData.get(position).PHONE);
			
			for(int i=0;i<FormList.noNetData.size();i++){
				
				if(FormList.noNetData.get(i).ID==FormList.mynoNetMasterId){
					intent2.putExtra("title_tv", FormList.noNetData.get(i).TITLE);
					intent2.putExtra("header_tv", FormList.noNetData.get(i).NOTE);
				}
				
			}
			
			startActivity(intent2);
			
			break;

		default:
			break;
		}
		
		

	}

	private void expand() {
		for (int i = 0; i < mList.size(); i++) {
			mExpandableListView.expandGroup(i);
		}
	}

	// 清空答案
	private void clearAnswer() {

		et_name.setText("");
		et_phone.setText("");

		mList.clear();

		if (bundle != null) {
			mList.addAll((List<FormatDetailedQuestionModel.ParentModel>) bundle
					.getSerializable(DATA_LIST));
		}

		for (int i = 0; i < mList.size(); i++) {

			mList.get(i).setSameGrop(false);

			List<FormatDetailedQuestionModel.AnswerModel> answers = mList
					.get(i).getAnswers();
			for (FormatDetailedQuestionModel.AnswerModel model : answers) {
				model.setChecked(false);
				model.setSuggestionText("");
				mList.get(i).setSelect(false);
			}
		}

		adapter.notifyDataSetChanged();
		mExpandableListView.setSelection(0);
	}

	// 隐藏键盘
	private void hideKeyBoard() {

		InputMethodManager imm = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);

		if (imm != null) {
			imm.hideSoftInputFromWindow(getWindow().getDecorView()
					.getWindowToken(), 0);
		}
	}

	private void getAnInfo() {

		if (FormList.downLoadData != null) {

			int num1 = FormList.downLoadData.indexOf("[");
			int num2 = FormList.downLoadData.indexOf("]");
			myJson = FormList.downLoadData.substring(num1, num2 + 1);

		}

	}

	// 检查当前网络是否可用
	private boolean isNetworkAvailable(Activity activity) {

		Context context = activity.getApplicationContext();

		// 获取手机所有连接管理对象（包括对wi-fi,net等连接的管理）
		ConnectivityManager connectivityManager = (ConnectivityManager) context
				.getSystemService(Context.CONNECTIVITY_SERVICE);

		if (connectivityManager == null) {

			return false;

		} else {

			// 获取NetworkInfo对象
			NetworkInfo[] networkInfo = connectivityManager.getAllNetworkInfo();

			if (networkInfo != null && networkInfo.length > 0) {
				for (int i = 0; i < networkInfo.length; i++) {
					/*
					 * System.out.println(i + "===状态===" +
					 * networkInfo[i].getState()); System.out.println(i +
					 * "===类型===" + networkInfo[i].getTypeName());
					 */
					// 判断当前网络状态是否为连接状态
					if (networkInfo[i].getState() == NetworkInfo.State.CONNECTED) {

						// 判断当前的wifi的ip和服务器的ip是否相同
						// //=======================================================================

						// 获取wifi服务
						WifiManager wifiManager = (WifiManager) getSystemService(Context.WIFI_SERVICE);
						// 判断wifi是否开启
						if (!wifiManager.isWifiEnabled()) {
							wifiManager.setWifiEnabled(true);
						}

						WifiInfo wifiInfo = wifiManager.getConnectionInfo();
						int ipAddress = wifiInfo.getIpAddress();
						String ip = intToIp(ipAddress);
						// Toast.makeText(this, "当前ip为" + ip, 0).show();
						// 判断当前的wifi的ip和服务器的ip是否相同
						// if (!ip.equals("0.0.0.0")) {
						// if
						// (!ip.equals("10.0.3.15")||!ip.equals("192.168.11.116"))
						// {
//						if (!ip.equals("10.0.3.15")
//								&& !ip.equals(MainActivity.myIpAddress)) {
//
//							return false;
//						}

						// //=======================================================================
						
						return true;
					}
				}
			}
		}

		return false;
	}

	private String intToIp(int i) {

		return (i & 0Xff) + "." + ((i >> 8) & 0Xff) + "." + ((i >> 16) & 0xff)
				+ "." + (i >> 24 & 0xff);

	}

	@Override
	protected void onActivityResult(int requestCode, int resultCode, Intent data) {

		switch (requestCode) {
		case 3333:
			
			if (!isNetworkAvailable(DetailedQuestionNonetWork.this)) {

				ll_conn_bg.setVisibility(View.VISIBLE);
				tv_conn_bg.setVisibility(View.VISIBLE);
				tv_conn_bg.setText("请连接网络，点击刷新");
				Toast.makeText(DetailedQuestionNonetWork.this, "请连接网络...",0).show();

			} else {
	
			lv_recordAll.setVisibility(View.VISIBLE);
			ll_conn_bg.setVisibility(View.GONE);
			tv_conn_bg.setVisibility(View.GONE);
			getRecordAllData();
			}
			break;

		default:
			break;
		}

	}

}
