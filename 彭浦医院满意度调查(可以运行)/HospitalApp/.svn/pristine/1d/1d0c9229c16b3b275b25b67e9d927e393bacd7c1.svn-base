package com.example.hospitalapp.utils;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.List;

import com.example.hospitalapp.FormList;
import com.example.hospitalapp.nonetwork.entity.DetailedQuestionModel;
import com.example.hospitalapp.nonetwork.entity.FormatDetailedQuestionModel;
import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;

import android.content.Context;
import android.os.AsyncTask;
import android.text.TextUtils;

/**
 * Created by zl on 2016/10/23.
 */

public abstract class Json2ModelAsyncNonetWork extends AsyncTask<Void, Void, List<DetailedQuestionModel>>{

    private Context context;
    private int index = -1;
    private String[] temp = null;
    private String json;
    
    public Json2ModelAsyncNonetWork(Context context) {
        this.context = context;
    }

    @Override
    protected void onPreExecute() {
        super.onPreExecute();
    }

    @Override
    protected List<DetailedQuestionModel> doInBackground(Void... params) {
    	
    	if (!TextUtils.isEmpty(FormList.downLoadData)) {
			temp = FormList.downLoadData.split("]");

			json= (FormList.downLoadData.replace(temp[0] + "]", ""))
					.replace(temp[1] + "]", "");
		}
    	
        //String json = IOStreamUtil.getJson(context);
        Gson gson = new Gson();
        List<DetailedQuestionModel> list = new ArrayList<DetailedQuestionModel>();
        Type type = new TypeToken<ArrayList<DetailedQuestionModel>>() {}.getType();
        list = gson.fromJson(json, type);
        return list;
    }

    @Override
    protected void onPostExecute(List<DetailedQuestionModel> result) {
        if (result != null && result.size() > 0 ) {
            ArrayList<FormatDetailedQuestionModel.ParentModel> parentList = new ArrayList<FormatDetailedQuestionModel.ParentModel>();
            for (DetailedQuestionModel answerDetailModel : result) {
                if (answerDetailModel.getPARENTID() == 0 && answerDetailModel.isISANSWER() == false) {
                    index ++;
                    FormatDetailedQuestionModel.ParentModel parentModel = new FormatDetailedQuestionModel.ParentModel();
                    parentModel.setCode(answerDetailModel.getCODE());
                    parentModel.setParentTitle(answerDetailModel.getTITLE());
                    parentModel.setAnswerTitle(false);
                    List<FormatDetailedQuestionModel.AnswerModel> answerModels = new ArrayList<FormatDetailedQuestionModel.AnswerModel>();
                    parentModel.setAnswers(answerModels);
                    parentModel.setDataIndex(index);
                    parentModel.setTitle(true);
                    parentModel.setMasterId(answerDetailModel.getMASTERID());
                    parentList.add(parentModel);
                }
                FormatDetailedQuestionModel.ParentModel childModel = null;
                if (answerDetailModel.isISANSWER() == true && answerDetailModel.getTITLE().indexOf("多选") != -1) {
                    index++;
                    childModel = new FormatDetailedQuestionModel.ParentModel();
                    childModel.setParentTitle(answerDetailModel.getTITLE());
                    childModel.setCode(answerDetailModel.getCODE());
                    childModel.setAnswerType(true);
                    childModel.setAnswerTitle(true);
                    childModel.setTitle(false);
                    childModel.setMasterId(answerDetailModel.getMASTERID());
                    List<FormatDetailedQuestionModel.AnswerModel> answerModels = new ArrayList<FormatDetailedQuestionModel.AnswerModel>();
                    childModel.setAnswers(answerModels);
                    childModel.setDataIndex(index);
                    parentList.add(childModel);
                }

                if (answerDetailModel.isISANSWER() == true && answerDetailModel.getTITLE().indexOf("多选") == -1) {
                    index++;
                    childModel = new FormatDetailedQuestionModel.ParentModel();
                    childModel.setParentTitle(answerDetailModel.getTITLE());
                    childModel.setCode(answerDetailModel.getCODE());
                    childModel.setAnswerType(false);
                    childModel.setAnswerTitle(true);
                    childModel.setTitle(false);
                    childModel.setMasterId(answerDetailModel.getMASTERID());
                    List<FormatDetailedQuestionModel.AnswerModel> answerModels = new ArrayList<FormatDetailedQuestionModel.AnswerModel>();
                    childModel.setAnswers(answerModels);
                    childModel.setDataIndex(index);
                    parentList.add(childModel);
                }

                if (answerDetailModel.getPARENTID() != 0 && answerDetailModel.isISANSWER() == false) {
                    FormatDetailedQuestionModel.AnswerModel answerModel = new FormatDetailedQuestionModel.AnswerModel();
                    answerModel.setInput(answerDetailModel.isISINPUT());
                    answerModel.setAnswerDetail(answerDetailModel.getTITLE());
                    answerModel.setInputType(answerDetailModel.getINPUTTYPE());
                    answerModel.setJumpCode(answerDetailModel.getJUMP_CODE());
                    answerModel.setId(answerDetailModel.getID());
                    answerModel.setTitleend(answerDetailModel.getTITLE_END());
                    parentList.get(index).getAnswers().add(answerModel);
                }
            }
            onPostExecute(parentList);
        }
    }

    public abstract void onPostExecute(ArrayList<FormatDetailedQuestionModel.ParentModel> parentList);
}
